:host {
    position: relative;
}

.label {
    margin-bottom: 2px; // distance between label and input
    font-size: 14px;
    color: var(--cs-primary-color);

    //modifiers
    &--fixed {
        margin-bottom: 0;
        transform: translate(7px, -52px);
        position: absolute;
        background-color: var(--cs-background-color);
        font-size: 14px;
        transition: color 0.1s;
    }

    &--floating {
        margin-bottom: 0;
        transform: translate(15px, -33px);
        position: absolute;
        transition: transform 0.1s, color 0.3s, font-size 0.1s;
    }
}

.cs-input {
    height: var(--cs-input-height);
    outline: 1px solid var(--cs-secondary-color);
    border-radius: 7px;
    width: 100%;
    transition: box-shadow 0.1s, outline 0.5s;
    display: flex;

    &__element {
        padding: 12px;
        border-radius: inherit;
        outline: none;
        border: none;
        flex-grow: 1;
        font-family: var(--cs-font-family) !important;

        &::placeholder {
            color: var(--cs-secondary-color);
            /* Firefox */
        }

        &::-ms-input-placeholder {
            /* Edge 12 -18 */
            color: var(--cs-secondary-color);
        }
    }

    &__content {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
    }

    // on input hover
    &:has(.cs-input__element):hover {
        outline-color: var(--cs-primary-color);
    }

    // on input focus
    &:focus-within {
        outline-color: var(--cs-primary-color);
        box-shadow: 0 0 0 0.3rem var(--cs-input-box-shadow);

        // label styles
        // + means we are going to select a cs-input sibling called .label--floating
        &+.label--floating {
            transform: translateY(-67px);
            color: var(--cs-primary-color);
            font-size: 14px;
        }

        &+.label--fixed {
            color: var(--cs-primary-color);
        }
    }

    // material modifiers (styles)
    &--material-outline {
        padding-left: 10px;
        outline-width: 2px;

        &+.label--floating {
            background-color: var(--cs-background-color);
        }

        &+.label--fixed {
            transform: translate(10px, -53px);
        }

        &:focus-within {
            box-shadow: none;

            &+.label--floating {
                transform: translate(10px, -53px);
            }
        }
    }

    &--material {
        outline: none;
        height: calc(var(--cs-input-height) + 20px);
        padding-left: 10px;
        background-color: whitesmoke;
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;

        .cs-input__element {
            background-color: inherit;
            margin-top: 10px;
        }

        &+.label--fixed {
            background-color: transparent;
            transform: translate(10px, -57px);
        }

        &+.label--floating {
            background-color: transparent;
            transform: translate(15px, -40px);
        }

        &:focus-within {
            box-shadow: none;

            &+.label--floating {
                background-color: transparent;
                transform: translate(10px, -57px);
            }

            // we are going to select any sibling after the input with ~
            &~.cs-input-bar {
                .cs-input-bar__highlight {
                    transform: scale(1);
                }
            }
        }
    }

}


.cs-input-bar {
    height: 2px;
    background-color: var(--cs-grey-color);
    width: 100%;

    &__highlight {
        background-color: var(--cs-primary-color);
        //default scale is hidden
        transform: scale(0);
        height: 2px;
        transition: transform ease-in 0.3s;
        width: 100%;
    }
}

.error-message {
    color: var(--cs-danger-color);
    font-size: 12px;
}

.cs-input[invalid="true"] {
    outline-color: var(--cs-danger-color);

    &:has(.cs-input__element):hover {
        outline-color: var(--cs-danger-color);
    }

    &:focus-within {
        outline-color: var(--cs-danger-color);
        box-shadow: none;
    }

    &+.label--fixed,
    &+.label--floating {
        color: var(--cs-danger-color);
    }

    &~.cs-input-bar {
        .cs-input-bar__highlight {
            background-color: var(--cs-danger-color);
        }
    }
}

.cs-input[valid="true"] {
    outline-color: var(--cs-success-color);

    &:has(.cs-input__element):hover {
        outline-color: var(--cs-success-color);
    }

    &:focus-within {
        outline-color: var(--cs-success-color);
        box-shadow: none;
    }

    &+.label--fixed,
    &+.label--floating {
        color: var(--cs-success-color);
    }

    &~.cs-input-bar {
        .cs-input-bar__highlight {
            background-color: var(--cs-success-color);
        }
    }
}

.cs-input[filled="true"] {
    &+.label--floating {
        transform: translateY(-67px);
        font-size: 14px;
    }
}

.cs-input--material[filled="true"] {
    &+.label--floating {
        transform: translate(10px, -57px);
    }
}

.cs-input--material-outline[filled="true"] {
    &+.label--floating {
        transform: translate(10px, -53px);
    }
}